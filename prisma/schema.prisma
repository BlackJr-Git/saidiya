// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

enum Status {
  active
  completed
  draft
  closed
}

enum Category {
  education
  environment
  health
  social
  culture
  tech
  community
  other
}


model User {
  id            String         @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  campaigns     Campaign[]
  contributions Contribution[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Campaign {
  id            String         @id @default(uuid())
  title         String
  description   String?
  coverImage    String?
  targetAmount  Float
  currentAmount Float
  category      Category
  status        Status         @default(active)
  startDate     DateTime?       @default(now())
  endDate       DateTime?       @default(now())
  localisation  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  contributions Contribution[]

  @@map("campaign")
}

model Contribution {
  id          String      @id @default(uuid())
  amount      Float
  message     String?
  anonymous   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  campaignId  String
  campaign    Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  certificate Certificate?

  @@map("contribution")
}

model Certificate {
  id              String       @id @default(uuid())
  certificateCode String       @unique
  issueDate       DateTime     @default(now())
  validUntil      DateTime?
  status          String       @default("valid") // valid, revoked, expired
  metadata        Json?        // Additional data like template info, signature details, etc.
  contributionId  String       @unique
  contribution    Contribution @relation(fields: [contributionId], references: [id], onDelete: Cascade)

  @@map("certificate")
}
